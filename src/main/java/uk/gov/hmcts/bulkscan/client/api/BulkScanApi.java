/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.3.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package uk.gov.hmcts.bulkscan.client.api;

import uk.gov.hmcts.bulkscan.client.model.Envelope;
import uk.gov.hmcts.bulkscan.client.model.Lease;
import uk.gov.hmcts.bulkscan.client.model.StatusUpdate;
import java.util.UUID;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.CookieValue;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2021-03-02T14:18:17.645232Z[Europe/London]")

@Validated
@Api(value = "BulkScan", description = "the BulkScan API")
public interface BulkScanApi {

    /**
     * PUT /envelopes/{team}/envelope/{envelopeId}/lease/{leaseId} : Lease this envelope for processing
     *
     * @param team Team name who the envelopes belong to. Supplied S2S token will be validated against this path (required)
     * @param envelopeId UUID for the envelope to be leased (required)
     * @param leaseId UUID for a lease to be created (required)
     * @param serviceAuthorization S2S auth token (required)
     * @param lease The lease to create. (optional)
     * @return Created (status code 201)
     *         or Requires S2S authentication token (status code 401)
     *         or You do not have permission to access this teams envelopes (status code 403)
     *         or Team or envelope not found not found (status code 404)
     *         or Lease already exists (status code 409)
     */
    @ApiOperation(value = "Lease this envelope for processing", nickname = "acquireEnvelopeLease", notes = "", response = Lease.class, tags={ "bulk-scan", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Created", response = Lease.class),
        @ApiResponse(code = 401, message = "Requires S2S authentication token"),
        @ApiResponse(code = 403, message = "You do not have permission to access this teams envelopes"),
        @ApiResponse(code = 404, message = "Team or envelope not found not found"),
        @ApiResponse(code = 409, message = "Lease already exists") })
    @RequestMapping(value = "/envelopes/{team}/envelope/{envelopeId}/lease/{leaseId}",
        produces = "application/json", 
        consumes = "application/json",
        method = RequestMethod.PUT)
    Lease acquireEnvelopeLease(@ApiParam(value = "Team name who the envelopes belong to. Supplied S2S token will be validated against this path",required=true) @PathVariable("team") String team,@ApiParam(value = "UUID for the envelope to be leased",required=true) @PathVariable("envelopeId") UUID envelopeId,@ApiParam(value = "UUID for a lease to be created",required=true) @PathVariable("leaseId") UUID leaseId,@ApiParam(value = "S2S auth token" ,required=true) @RequestHeader(value="ServiceAuthorization", required=true) String serviceAuthorization,@ApiParam(value = "The lease to create."  )  @Valid @RequestBody(required = false) Lease lease);


    /**
     * DELETE /envelopes/{team}/envelope/{envelopeId}/lease/{leaseId} : Delete this lease for the envelope
     *
     * @param team Team name who the envelopes belong to. Supplied S2S token will be validated against this path (required)
     * @param envelopeId UUID for the envelope to remove the lease from (required)
     * @param leaseId UUID for a lease to be deleted (required)
     * @param serviceAuthorization S2S auth token (required)
     * @return Deleted Successfully (status code 204)
     *         or Requires S2S authentication token (status code 401)
     *         or You do not have permission to access this teams envelopes (status code 403)
     *         or Team or envelope not found not found (status code 404)
     *         or Lease already exists (status code 409)
     */
    @ApiOperation(value = "Delete this lease for the envelope", nickname = "breakEnvelopeLease", notes = "", tags={ "bulk-scan", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Deleted Successfully"),
        @ApiResponse(code = 401, message = "Requires S2S authentication token"),
        @ApiResponse(code = 403, message = "You do not have permission to access this teams envelopes"),
        @ApiResponse(code = 404, message = "Team or envelope not found not found"),
        @ApiResponse(code = 409, message = "Lease already exists") })
    @RequestMapping(value = "/envelopes/{team}/envelope/{envelopeId}/lease/{leaseId}",
        method = RequestMethod.DELETE)
    void breakEnvelopeLease(@ApiParam(value = "Team name who the envelopes belong to. Supplied S2S token will be validated against this path",required=true) @PathVariable("team") String team,@ApiParam(value = "UUID for the envelope to remove the lease from",required=true) @PathVariable("envelopeId") UUID envelopeId,@ApiParam(value = "UUID for a lease to be deleted",required=true) @PathVariable("leaseId") UUID leaseId,@ApiParam(value = "S2S auth token" ,required=true) @RequestHeader(value="ServiceAuthorization", required=true) String serviceAuthorization);


    /**
     * GET /envelopes/{team} : Gets a list of envelopes in a pending state
     *
     * @param team Team name who the envelopes belong to. Supplied S2S token will be validated against this path (required)
     * @param serviceAuthorization S2S auth token (required)
     * @return OK (status code 200)
     *         or Requires S2S authentication token (status code 401)
     *         or You do not have permission to access this teams envelopes (status code 403)
     *         or Team not found (status code 404)
     */
    @ApiOperation(value = "Gets a list of envelopes in a pending state", nickname = "getTeamEnvelopes", notes = "", response = Envelope.class, responseContainer = "List", tags={ "bulk-scan", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Envelope.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Requires S2S authentication token"),
        @ApiResponse(code = 403, message = "You do not have permission to access this teams envelopes"),
        @ApiResponse(code = 404, message = "Team not found") })
    @RequestMapping(value = "/envelopes/{team}",
        produces = "application/json", 
        method = RequestMethod.GET)
    Envelope[] getTeamEnvelopes(@ApiParam(value = "Team name who the envelopes belong to. Supplied S2S token will be validated against this path",required=true) @PathVariable("team") String team,@ApiParam(value = "S2S auth token" ,required=true) @RequestHeader(value="ServiceAuthorization", required=true) String serviceAuthorization);


    /**
     * PATCH /envelopes/{team}/envelope/{envelopeId} : Updates the status of this envelope
     *
     * @param team Team name who the envelopes belong to. Supplied S2S token will be validated against this path (required)
     * @param envelopeId UUID for the envelope to remove the lease from (required)
     * @param leaseId leaseId for the lease which has been acquired for this envelope (required)
     * @param serviceAuthorization S2S auth token (required)
     * @param processingStatus Sets the new status for the envelope. (optional)
     * @return OK (status code 200)
     */
    @ApiOperation(value = "Updates the status of this envelope", nickname = "setEnvelopeStatus", notes = "", response = Envelope.class, tags={ "bulk-scan", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Envelope.class) })
    @RequestMapping(value = "/envelopes/{team}/envelope/{envelopeId}",
        produces = "application/json", 
        consumes = "application/json",
        method = RequestMethod.PATCH)
    Envelope setEnvelopeStatus(@ApiParam(value = "Team name who the envelopes belong to. Supplied S2S token will be validated against this path",required=true) @PathVariable("team") String team,@ApiParam(value = "UUID for the envelope to remove the lease from",required=true) @PathVariable("envelopeId") UUID envelopeId,@ApiParam(value = "leaseId for the lease which has been acquired for this envelope" ,required=true) @RequestHeader(value="leaseId", required=true) UUID leaseId,@ApiParam(value = "S2S auth token" ,required=true) @RequestHeader(value="ServiceAuthorization", required=true) String serviceAuthorization,@ApiParam(value = "Sets the new status for the envelope."  )  @Valid @RequestBody(required = false) StatusUpdate processingStatus);

}
